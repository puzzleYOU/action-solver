"""
This type stub file was generated by pyright.
"""

"""Summary representation of a graph."""
__all__ = ("GraphSummary", "summary")
class FakeWrapper:
    """Object whose interface is compatible with C{textwrap.TextWrapper}
    but does no wrapping."""
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def fill(self, text): # -> list[Any]:
        ...
    
    def wrap(self, text): # -> list[Any]:
        ...
    


class GraphSummary:
    """Summary representation of a graph.

    The summary representation includes a header line and the list of
    edges. The header line consists of C{IGRAPH}, followed by a
    four-character long code, the number of vertices, the number of
    edges, two dashes (C{--}) and the name of the graph (i.e.
    the contents of the C{name} attribute, if any). For instance,
    a header line may look like this::

        IGRAPH U--- 4 5 --

    The four-character code describes some basic properties of the
    graph. The first character is C{U} if the graph is undirected,
    C{D} if it is directed. The second letter is C{N} if the graph
    has a vertex attribute called C{name}, or a dash otherwise. The
    third letter is C{W} if the graph is weighted (i.e. it has an
    edge attribute called C{weight}), or a dash otherwise. The
    fourth letter is C{B} if the graph has a vertex attribute called
    C{type}; this is usually used for bipartite graphs.

    Edges may be presented as an ordinary edge list or an adjacency
    list. By default, this depends on the number of edges; however,
    you can control it with the appropriate constructor arguments.
    """
    def __init__(self, graph, verbosity=..., width=..., edge_list_format=..., max_rows=..., print_graph_attributes=..., print_vertex_attributes=..., print_edge_attributes=..., full=...) -> None:
        """Constructs a summary representation of a graph.

        @param verbosity: the verbosity of the summary. If zero, only
          the header line will be returned. If one, the header line
          and the list of edges will both be returned.
        @param width: the maximal width of each line in the summary.
          C{None} means that no limit will be enforced.
        @param max_rows: the maximal number of rows to print in a single
          table (e.g., vertex attribute table or edge attribute table)
        @param edge_list_format: format of the edge list in the summary.
          Supported formats are: C{compressed}, C{adjlist}, C{edgelist},
          C{auto}, which selects automatically from the other three based
          on some simple criteria.
        @param print_graph_attributes: whether to print graph attributes
          if there are any.
        @param print_vertex_attributes: whether to print vertex attributes
          if there are any.
        @param print_edge_attributes: whether to print edge attributes
          if there are any.
        @param full: False has no effect; True turns on the attribute
          printing for graph, vertex and edge attributes with verbosity 1.
        """
        ...
    
    def __str__(self) -> str:
        """Returns the summary representation as a string."""
        ...
    


def summary(obj, stream=..., *args, **kwds): # -> None:
    """Prints a summary of object o to a given stream

    Positional and keyword arguments not explicitly mentioned here are passed
    on to the underlying C{summary()} method of the object if it has any.

    @param obj: the object about which a human-readable summary is requested.
    @param stream: the stream to be used. If C{None}, the standard output
      will be used.
    """
    ...

