"""
This type stub file was generated by pyright.
"""

from igraph.drawing.baseclasses import AbstractEdgeDrawer

"""
Drawers for various edge styles in graph plots.
"""
__all__ = ("AbstractCairoEdgeDrawer", "AlphaVaryingEdgeDrawer", "CairoArrowEdgeDrawer", "DarkToLightEdgeDrawer", "LightToDarkEdgeDrawer", "TaperedEdgeDrawer")
cairo = ...
class AbstractCairoEdgeDrawer(AbstractEdgeDrawer):
    """Cairo-specific abstract edge drawer object."""
    def __init__(self, context, palette) -> None:
        """Constructs the edge drawer.

        @param context: a Cairo context on which the edges will be drawn.
        @param palette: the palette that can be used to map integer color
            indices to colors when drawing edges
        """
        ...
    
    def draw_loop_edge(self, edge, vertex): # -> None:
        """Draws a loop edge.

        The default implementation draws a small circle.

        @param edge: the edge to be drawn. Visual properties of the edge
          are defined by the attributes of this object.
        @param vertex: the vertex to which the edge is attached. Visual
          properties are given again as attributes.
        """
        ...
    
    def draw_undirected_edge(self, edge, src_vertex, dest_vertex): # -> None:
        """Draws an undirected edge.

        The default implementation of this method draws undirected edges
        as straight lines. Loop edges are drawn as small circles.

        @param edge: the edge to be drawn. Visual properties of the edge
          are defined by the attributes of this object.
        @param src_vertex: the source vertex. Visual properties are given
          again as attributes.
        @param dest_vertex: the target vertex. Visual properties are given
          again as attributes.
        """
        ...
    


class CairoArrowEdgeDrawer(AbstractCairoEdgeDrawer):
    """Edge drawer implementation that draws undirected edges as
    straight lines and directed edges as arrows.
    """
    def draw_directed_edge(self, edge, src_vertex, dest_vertex): # -> None:
        ...
    


class TaperedEdgeDrawer(AbstractCairoEdgeDrawer):
    """Edge drawer implementation that draws undirected edges as
    straight lines and directed edges as tapered lines that are
    wider at the source and narrow at the destination.
    """
    def draw_directed_edge(self, edge, src_vertex, dest_vertex): # -> None:
        ...
    


class AlphaVaryingEdgeDrawer(AbstractCairoEdgeDrawer):
    """Edge drawer implementation that draws undirected edges as
    straight lines and directed edges by varying the alpha value
    of the specified edge color between the source and the destination.
    """
    def __init__(self, context, palette, alpha_at_src, alpha_at_dest) -> None:
        ...
    
    def draw_directed_edge(self, edge, src_vertex, dest_vertex): # -> None:
        ...
    


class LightToDarkEdgeDrawer(AlphaVaryingEdgeDrawer):
    """Edge drawer implementation that draws undirected edges as
    straight lines and directed edges by using an alpha value of
    zero (total transparency) at the source and an alpha value of
    one (full opacity) at the destination. The alpha value is
    interpolated in-between.
    """
    def __init__(self, context, palette) -> None:
        ...
    


class DarkToLightEdgeDrawer(AlphaVaryingEdgeDrawer):
    """Edge drawer implementation that draws undirected edges as
    straight lines and directed edges by using an alpha value of
    one (full opacity) at the source and an alpha value of zero
    (total transparency) at the destination. The alpha value is
    interpolated in-between.
    """
    def __init__(self, context, palette) -> None:
        ...
    


