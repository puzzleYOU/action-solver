"""
This type stub file was generated by pyright.
"""

from .base import AbstractCairoDrawer

__all__ = ("CairoPolygonDrawer", )
class CairoPolygonDrawer(AbstractCairoDrawer):
    """Class that is used to draw polygons in Cairo.

    The corner points of the polygon can be set by the C{points}
    property of the drawer, or passed at construction time. Most
    drawing methods in this class also have an extra C{points}
    argument that can be used to override the set of points in the
    C{points} property."""
    def __init__(self, context, bbox=...) -> None:
        """Constructs a new polygon drawer that draws on the given
        Cairo context.

        @param  context: the Cairo context to draw on
        @param  bbox:    ignored, leave it at its default value
        """
        ...
    
    def draw_path(self, points, corner_radius=...): # -> None:
        """Sets up a Cairo path for the outline of a polygon on the given
        Cairo context.

        @param points: the coordinates of the corners of the polygon,
          in clockwise or counter-clockwise order.
        @param corner_radius: if zero, an ordinary polygon will be drawn.
          If positive, the corners of the polygon will be rounded with
          the given radius.
        """
        ...
    
    def draw(self, points): # -> None:
        """Draws the polygon using the current stroke of the Cairo context.

        @param points: the coordinates of the corners of the polygon,
          in clockwise or counter-clockwise order.
        """
        ...
    


