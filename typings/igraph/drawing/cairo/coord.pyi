"""
This type stub file was generated by pyright.
"""

from abc import abstractmethod
from igraph.drawing.cairo.base import AbstractCairoDrawer

"""
Coordinate systems and related plotting routines
"""
class CoordinateSystem(AbstractCairoDrawer):
    """Class implementing a coordinate system object.

    Coordinate system objects are used when drawing plots which
    2D or 3D coordinate system axes. This is an abstract class
    which must be extended in order to use it. In general, you'll
    only need the documentation of this class if you intend to
    implement an own coordinate system not present in igraph yet.
    """
    @abstractmethod
    def draw(self):
        """Draws the coordinate system.

        This method must be overridden in derived classes.
        """
        ...
    
    @abstractmethod
    def local_to_context(self, x, y):
        """Converts local coordinates to the context coordinate system (given
        by the bounding box).

        This method must be overridden in derived classes."""
        ...
    


class DescartesCoordinateSystem(CoordinateSystem):
    """Class implementing a 2D Descartes coordinate system object."""
    def __init__(self, context, bbox, bounds) -> None:
        """Initializes the coordinate system.

        @param context: the context on which the coordinate system will
          be drawn.
        @param bbox: the bounding box that will contain the coordinate
          system.
        @param bounds: minimum and maximum X and Y values in a 4-tuple.
        """
        ...
    
    @property
    def bbox(self): # -> BoundingBox:
        """Returns the bounding box of the coordinate system"""
        ...
    
    @bbox.setter
    def bbox(self, bbox): # -> None:
        """Sets the bounding box of the coordinate system"""
        ...
    
    @property
    def bounds(self): # -> tuple[Any | float, Any, Any | float, Any]:
        """Returns the lower and upper bounds of the X and Y values"""
        ...
    
    @bounds.setter
    def bounds(self, bounds): # -> None:
        """Sets the lower and upper bounds of the X and Y values"""
        ...
    
    def draw(self): # -> None:
        """Draws the coordinate system."""
        ...
    
    def local_to_context(self, x, y): # -> tuple[Any, Any]:
        """Converts local coordinates to the context coordinate system (given
        by the bounding box).
        """
        ...
    


