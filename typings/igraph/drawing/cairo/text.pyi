"""
This type stub file was generated by pyright.
"""

from igraph.drawing.cairo.base import AbstractCairoDrawer

"""
Drawers for labels on plots.
"""
__all__ = ("CairoTextDrawer", )
class CairoTextDrawer(AbstractCairoDrawer):
    """Class that draws text on a Cairo context.

    This class supports multi-line text unlike the original Cairo text
    drawing methods."""
    def __init__(self, context, text=..., halign=..., valign=...) -> None:
        """Constructs a new instance that will draw the given C{text} on
        the given Cairo C{context}.
        """
        ...
    
    def draw(self, wrap=...): # -> None:
        """Draws the text in the current bounding box of the drawer.

        Since the class itself is an instance of L{AbstractCairoDrawer}, it
        has an attribute named C{bbox} which will be used as a bounding box.

        @param wrap: whether to allow re-wrapping of the text if it does not
            fit within the bounding box horizontally.
        """
        ...
    
    def get_text_layout(self, x=..., y=..., width=..., wrap=...): # -> list[Any]:
        """Calculates the layout of the current text. C{x} and C{y} denote the
        coordinates where the drawing should start. If they are both C{None},
        the current position of the context will be used.

        Vertical alignment settings are not taken into account in this method
        as the text is not drawn within a box.

        @param x: The X coordinate of the reference point where the layout should
            start.
        @param y: The Y coordinate of the reference point where the layout should
            start.
        @param width: The width of the box in which the text will be fitted. It
            matters only when the text is right-aligned or centered. The text
            will overflow the box if any of the lines is longer than the box
            width and C{wrap} is C{False}.
        @param wrap: whether to allow re-wrapping of the text if it does not
            fit within the given width.

        @return: a list consisting of C{(x, y, line)} tuples where C{x} and
            C{y} refer to reference points on the Cairo canvas and C{line}
            refers to the corresponding text that should be plotted there.
        """
        ...
    
    def draw_at(self, x=..., y=..., width=..., wrap=...): # -> None:
        """Draws the text by setting up an appropriate path on the Cairo
        context and filling it. C{x} and C{y} denote the coordinates where the
        drawing should start. If they are both C{None}, the current position
        of the context will be used.

        Vertical alignment settings are not taken into account in this method
        as the text is not drawn within a box.

        @param x: The X coordinate of the reference point where the layout should
            start.
        @param y: The Y coordinate of the reference point where the layout should
            start.
        @param width: The width of the box in which the text will be fitted. It
            matters only when the text is right-aligned or centered. The text
            will overflow the box if any of the lines is longer than the box
            width and C{wrap} is C{False}.
        @param wrap: whether to allow re-wrapping of the text if it does not
            fit within the given width.
        """
        ...
    
    @property
    def text(self): # -> str:
        """Returns the text to be drawn."""
        ...
    
    @text.setter
    def text(self, text): # -> None:
        """Sets the text that will be drawn.

        If C{text} is C{None}, it will be mapped to an empty string; otherwise,
        it will be converted to a string."""
        ...
    
    def text_extents(self): # -> tuple[Any, Any, Any, Any, Any, Any]:
        """Returns the X-bearing, Y-bearing, width, height, X-advance and
        Y-advance of the text.

        For multi-line text, the X-bearing and Y-bearing correspond to the
        first line, while the X-advance is extracted from the last line.
        and the Y-advance is the sum of all the Y-advances. The width and
        height correspond to the entire bounding box of the text."""
        ...
    


def test(): # -> None:
    """Testing routine for L{CairoTextDrawer}"""
    ...

if __name__ == "__main__":
    ...
