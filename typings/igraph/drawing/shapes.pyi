"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta, abstractmethod

"""
Shape drawing classes for igraph

Vertex shapes in igraph are usually referred to by short names like
C{"rect"} or C{"circle"}. This module contains the classes that
implement the actual drawing routines for these shapes, and a
resolver class that determines the appropriate shape drawer class
given the short name.

Classes that are derived from L{ShapeDrawer} in this module are
automatically registered by L{ShapeDrawerDirectory}. If you
implement a custom shape drawer, you must register it in
L{ShapeDrawerDirectory} manually if you wish to refer to it by a
name in the C{shape} attribute of vertices.
"""
__all__ = ("ShapeDrawerDirectory", )
class ShapeDrawer(metaclass=ABCMeta):
    """Static class, the ancestor of all vertex shape drawer classes.

    Custom shapes must implement at least the C{draw_path} method of the class.
    The method I{must not} stroke or fill, it should just set up the current
    Cairo path appropriately."""
    @staticmethod
    @abstractmethod
    def draw_path(ctx, center_x, center_y, width, height=..., **kwargs):
        """Draws the path of the shape on the given Cairo context, without
        stroking or filling it.

        This method must be overridden in derived classes implementing custom shapes
        and declared as a static method using C{staticmethod(...)}.

        @param ctx: the context to draw on
        @param center_x: the X coordinate of the center of the object
        @param center_y: the Y coordinate of the center of the object
        @param width: the width of the object
        @param height: the height of the object. If C{None}, equals to the width.
        """
        ...
    
    @staticmethod
    def intersection_point(center_x, center_y, source_x, source_y, width, height=...): # -> tuple[Any, Any]:
        """Determines where the shape centered at (center_x, center_y)
        intersects with a line drawn from (source_x, source_y) to
        (center_x, center_y).

        Can be overridden in derived classes. Must always be defined as a static
        method using C{staticmethod(...)}

        @param width: the width of the shape
        @param height: the height of the shape. If C{None}, defaults to the width
        @return: the intersection point (the closest to (source_x, source_y) if
            there are more than one) or (center_x, center_y) if there is no
            intersection
        """
        ...
    


class NullDrawer(ShapeDrawer):
    """Static drawer class which draws nothing.

    This class is used for graph vertices with unknown shapes"""
    names = ...
    @staticmethod
    def draw_path(ctx, center_x, center_y, width, height=...): # -> None:
        """Draws nothing."""
        ...
    


class RectangleDrawer(ShapeDrawer):
    """Static class which draws rectangular vertices"""
    names = ...
    @staticmethod
    def draw_path(ctx, center_x, center_y, width, height=..., **kwargs): # -> Any | None:
        """Draws a rectangle-shaped path on the Cairo context without stroking
        or filling it.
        @see: ShapeDrawer.draw_path"""
        ...
    
    @staticmethod
    def intersection_point(center_x, center_y, source_x, source_y, width, height=...): # -> tuple[Any, Any] | None:
        """Determines where the rectangle centered at (center_x, center_y)
        having the given width and height intersects with a line drawn from
        (source_x, source_y) to (center_x, center_y).

        @see: ShapeDrawer.intersection_point"""
        ...
    


class CircleDrawer(ShapeDrawer):
    """Static class which draws circular vertices"""
    names = ...
    @staticmethod
    def draw_path(ctx, center_x, center_y, width, height=..., **kwargs): # -> Any | None:
        """Draws a circular path on the Cairo context without stroking or
        filling it.

        Height is ignored, it is the width that determines the diameter of the circle.

        @see: ShapeDrawer.draw_path"""
        ...
    
    @staticmethod
    def intersection_point(center_x, center_y, source_x, source_y, width, height=...): # -> tuple[Any, Any]:
        """Determines where the circle centered at (center_x, center_y)
        intersects with a line drawn from (source_x, source_y) to
        (center_x, center_y).

        @see: ShapeDrawer.intersection_point"""
        ...
    


class UpTriangleDrawer(ShapeDrawer):
    """Static class which draws upright triangles"""
    names = ...
    @staticmethod
    def draw_path(ctx, center_x, center_y, width, height=..., **kwargs): # -> Any | None:
        """Draws an upright triangle on the Cairo context without stroking or
        filling it.

        @see: ShapeDrawer.draw_path"""
        ...
    
    @staticmethod
    def intersection_point(center_x, center_y, source_x, source_y, width, height=...): # -> tuple[Any, Any]:
        """Determines where the triangle centered at (center_x, center_y)
        intersects with a line drawn from (source_x, source_y) to
        (center_x, center_y).

        @see: ShapeDrawer.intersection_point"""
        ...
    


class DownTriangleDrawer(ShapeDrawer):
    """Static class which draws triangles pointing down"""
    names = ...
    @staticmethod
    def draw_path(ctx, center_x, center_y, width, height=..., **kwargs): # -> Any | None:
        """Draws a triangle on the Cairo context without stroking or
        filling it.

        @see: ShapeDrawer.draw_path"""
        ...
    
    @staticmethod
    def intersection_point(center_x, center_y, source_x, source_y, width, height=...): # -> tuple[Any, Any]:
        """Determines where the triangle centered at (center_x, center_y)
        intersects with a line drawn from (source_x, source_y) to
        (center_x, center_y).

        @see: ShapeDrawer.intersection_point"""
        ...
    


class DiamondDrawer(ShapeDrawer):
    """Static class which draws diamonds (i.e. rhombuses)"""
    names = ...
    @staticmethod
    def draw_path(ctx, center_x, center_y, width, height=..., **kwargs): # -> Any | None:
        """Draws a rhombus on the Cairo context without stroking or
        filling it.

        @see: ShapeDrawer.draw_path"""
        ...
    
    @staticmethod
    def intersection_point(center_x, center_y, source_x, source_y, width, height=...): # -> tuple[Any, Any]:
        """Determines where the rhombus centered at (center_x, center_y)
        intersects with a line drawn from (source_x, source_y) to
        (center_x, center_y).

        @see: ShapeDrawer.intersection_point"""
        ...
    


class ShapeDrawerDirectory:
    """Static class that resolves shape names to their corresponding
    shape drawer classes.

    Classes that are derived from L{ShapeDrawer} in this module are
    automatically registered by L{ShapeDrawerDirectory} when the module
    is loaded for the first time.
    """
    known_shapes = ...
    @classmethod
    def register(cls, drawer_class): # -> None:
        """Registers the given shape drawer class under the given names.

        @param drawer_class: the shape drawer class to be registered
        """
        ...
    
    @classmethod
    def register_namespace(cls, namespace): # -> None:
        """Registers all L{ShapeDrawer} classes in the given namespace

        @param namespace: a Python dict mapping names to Python objects."""
        ...
    
    @classmethod
    def resolve(cls, shape):
        """Given a shape name, returns the corresponding shape drawer class

        @param shape: the name of the shape
        @return: the corresponding shape drawer class

        @raise ValueError: if the shape is unknown
        """
        ...
    
    @classmethod
    def resolve_default(cls, shape, default=...):
        """Given a shape name, returns the corresponding shape drawer class
        or the given default shape drawer if the shape name is unknown.

        @param shape: the name of the shape
        @param default: the default shape drawer to return when the shape
          is unknown
        @return: the shape drawer class corresponding to the given name or
          the default shape drawer class if the name is unknown
        """
        ...
    


