"""
This type stub file was generated by pyright.
"""

from igraph.drawing.baseclasses import AbstractVertexDrawer

"""This module provides implementations of Matplotlib-specific vertex drawers,
i.e. drawers that the Matplotlib graph drawer will use to draw vertices.
"""
IdentityTransform = ...
PatchCollection = ...
__all__ = ("MatplotlibVertexDrawer", "VertexCollection")
class MatplotlibVertexDrawer(AbstractVertexDrawer):
    """Matplotlib backend-specific vertex drawer."""
    def __init__(self, ax, palette, layout) -> None:
        ...
    
    def draw(self, visual_vertex, vertex, coords):
        """Build the Artist for a vertex and return it."""
        ...
    


class VertexCollection(PatchCollection):
    """Collection of vertex patches for plotting.

    This class takes additional keyword arguments compared to PatchCollection:

    @param vertex_builder: A list of vertex builders to construct the visual
        vertices. This is updated if the size of the vertices is changed.
    @param size_callback: A function to be triggered after vertex sizes are
        changed. Typically this redraws the edges.
    """
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def get_sizes(self):
        """Same as get_size."""
        ...
    
    def get_size(self):
        """Get vertex sizes.

        If width and height are unequal, get the largest of the two.

        @return: An array of vertex sizes.
        """
        ...
    
    def set_size(self, sizes): # -> None:
        """Set vertex sizes.

        This rescales the current vertex symbol/path linearly, using this
        value as the largest of width and height.

        @param sizes: A sequence of vertex sizes or a single size.
        """
        ...
    
    def set_sizes(self, sizes): # -> None:
        """Same as set_size."""
        ...
    
    @property
    def stale(self):
        ...
    
    @stale.setter
    def stale(self, val): # -> None:
        ...
    


