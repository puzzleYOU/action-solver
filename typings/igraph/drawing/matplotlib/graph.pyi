"""
This type stub file was generated by pyright.
"""

from igraph.drawing.baseclasses import AbstractGraphDrawer

"""
Drawing routines to draw graphs.

This module contains routines to draw graphs on:

  - Cairo surfaces (L{DefaultGraphDrawer})
  - Matplotlib axes (L{MatplotlibGraphDrawer})

It also contains routines to send an igraph graph directly to
(U{Cytoscape<http://www.cytoscape.org>}) using the
(U{CytoscapeRPC plugin<http://gforge.nbic.nl/projects/cytoscaperpc/>}), see
L{CytoscapeGraphDrawer}. L{CytoscapeGraphDrawer} can also fetch the current
network from Cytoscape and convert it to igraph format.
"""
__all__ = ("MatplotlibGraphDrawer", )
Artist = ...
Affine2D = ...
@_additional_set_methods(("vertex_color", "vertex_size", "vertex_font", "vertex_label", "vertex_label_angle", "vertex_label_color", "vertex_label_dist", "vertex_label_size", "vertex_order", "vertex_shape", "vertex_size", "edge_color", "edge_curved", "edge_font", "edge_arrow_size", "edge_arrow_width", "edge_width", "edge_label", "edge_background", "edge_align_label", "autocurve", "layout"))
@_forwarder(("set_clip_path", "set_clip_box", "set_transform", "set_snap", "set_sketch_params", "set_figure", "set_animated", "set_picker"))
class GraphArtist(Artist, AbstractGraphDrawer):
    """Artist for an igraph.Graph object.

    @param graph: An igraph.Graph object to plot
    @param layout: A layout object or matrix of coordinates to use for plotting.
        Each element or row should describes the coordinates for a vertex.
    @param vertex_style: A dictionary specifying style options for vertices.
    @param edge_style: A dictionary specifying style options for edges.
    """
    def __init__(self, graph, vertex_drawer_factory=..., edge_drawer_factory=..., mark_groups=..., layout=..., palette=..., **kwds) -> None:
        ...
    
    def get_children(self): # -> tuple[Any, ...]:
        ...
    
    def get_vertices(self): # -> VertexCollection | None:
        """Get VertexCollection artist."""
        ...
    
    def get_edges(self): # -> EdgeCollection | None:
        """Get EdgeCollection artist."""
        ...
    
    def get_groups(self): # -> HullCollection | None:
        """Get HullCollection group/cluster/cover artists."""
        ...
    
    def get_vertex_labels(self): # -> list[Any]:
        """Get list of vertex label artists."""
        ...
    
    def get_edge_labels(self): # -> list[Any]:
        """Get list of edge label artists."""
        ...
    
    def get_datalim(self): # -> tuple[Any, Any]:
        """Get limits on x/y axes based on the graph layout data.

        There is a small padding based on the size of the vertex marker to
        ensure it fits into the canvas.
        """
        ...
    
    @_stale_wrapper
    def draw(self, renderer, *args, **kwds): # -> None:
        """Draw each of the children, with some buffering mechanism."""
        ...
    
    def set(self, **kwds): # -> None:
        """Set multiple parameters at once.

        The same options can be used as in the igraph.plot function.
        """
        ...
    
    def contains(self, mouseevent): # -> tuple[Any | Literal[False], dict[str, list[Any]]]:
        """Track 'contains' event for mouse interactions."""
        ...
    
    def pick(self, mouseevent): # -> None:
        """Track 'pick' event for mouse interactions."""
        ...
    


class MatplotlibGraphDrawer(AbstractGraphDrawer):
    """Graph drawer that uses a pyplot.Axes as context"""
    _shape_dict = ...
    def __init__(self, ax, vertex_drawer_factory=..., edge_drawer_factory=...) -> None:
        """Constructs the graph drawer and associates it with the mpl Axes

        @param ax: the matplotlib Axes to draw into.
        @param vertex_drawer_factory: a factory method that returns an
            L{AbstractVertexDrawer} instance bound to the given Matplotlib axes.
            The factory method must take three parameters: the axes and the
            palette to be used for drawing colored vertices, and the layout of
            the graph. The default vertex drawer is L{MatplotlibVertexDrawer}.
        @param edge_drawer_factory: a factory method that returns an
            L{AbstractEdgeDrawer} instance bound to a given Matplotlib Axes.
            The factory method must take two parameters: the Axes and the palette
            to be used for drawing colored edges. The default edge drawer is
            L{MatplotlibEdgeDrawer}.
        """
        ...
    
    def draw(self, graph, *args, **kwds): # -> GraphArtist:
        ...
    


